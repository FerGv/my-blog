(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{372:function(s,a,t){s.exports=t.p+"assets/img/what.d1326125.gif"},429:function(s,a,t){"use strict";t.r(a);var e=t(43),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"operador-bang-bang-valores-falsy-truthy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#operador-bang-bang-valores-falsy-truthy"}},[s._v("#")]),s._v(" Operador Bang Bang (Valores Falsy/Truthy)")]),s._v(" "),e("p",[s._v("Javascript es capaz de evaluar variables como si fueran booleanos en contextos donde son requeridos.")]),s._v(" "),e("p",{staticStyle:{"text-align":"center"}},[e("img",{attrs:{src:t(372),alt:"What"}})]),s._v(" "),e("p",[s._v("Lo siento, esa descripción es muy técnica 😅. Comencemos con un ejemplo para entender mejor:")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" nombre "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Fer'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nombre"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 'nombre' se considera 'true'")]),s._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'La condición se cumplió'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),e("p",[s._v('Esto es posible gracias a los valores "falsy" y "truthy", es decir, valores que en ciertos casos se pueden considerar como verdadero o falso. Para saber cuál es cuál, es más fácil memorizar aquellos que al final del día son falsos. Así, cualquier otro valor que no se encuentre en esa lista podemos asegurar que es verdadero.')]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("Falsy")]),s._v(" "),e("th",[s._v("Truthy")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("0")]),s._v(" "),e("td",[s._v("[]")])]),s._v(" "),e("tr",[e("td",[s._v('"" (string vacío)')]),s._v(" "),e("td",[s._v("{}")])]),s._v(" "),e("tr",[e("td",[s._v("false")]),s._v(" "),e("td",[s._v("Cualquier otro que no sea falsy")])]),s._v(" "),e("tr",[e("td",[s._v("null")]),s._v(" "),e("td")]),s._v(" "),e("tr",[e("td",[s._v("undefined")]),s._v(" "),e("td")]),s._v(" "),e("tr",[e("td",[s._v("NaN")]),s._v(" "),e("td")])])]),s._v(" "),e("p",[s._v("Posiblemente te estés preguntando ¿por qué el arreglo y el objeto vacío no se consideran falsos?. Esto se debe a que lo que JS evalúa en ellos es su referencia, en lugar de su contenido. Y estas referencias se generan automáticamente en la declaración, por lo que siempre serán verdaderos.")]),s._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[s._v("WARNING")]),s._v(" "),e("p",[s._v("Ten mucho cuidado al momento de condicionar usando arreglos y objetos. Para su uso correcto, evalúa explícitamente su contenido. Por ejemplo:")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" arregloVacio "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arregloVacio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" objetoVacio "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("keys")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("objectoVacio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])])]),s._v(" "),e("p",[s._v("Pero si tú por alguna razón realmente necesitas convertir el valor de una variable a booleano, te recomiendo usar alguna de las siguientes dos opciones:")]),s._v(" "),e("ol",[e("li",[s._v("Función "),e("code",[s._v("Boolean")])])]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" nombre "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Fer'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" booleano "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("Boolean")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 'Fer' -> true")]),s._v("\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[s._v("Operador Bang Bang")])]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" nombre "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Fer'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" booleano "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 'Fer' -> true")]),s._v("\n")])])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),e("p",[s._v("El operador Bang Bang realmente es el uso del operador "),e("code",[s._v("NOT")]),s._v(" dos veces, ya que la primera vez obtenemos el valor booleano contrario y la segunda nos regresa al original.")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" name "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Fer'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Primera negación")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("name "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 'Fer' -> false")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Segunda negación")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("name "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 'Fer' -> false -> true")]),s._v("\n")])])])]),s._v(" "),e("p",[s._v("¿Cuál es mejor? Ninguna. Usa la que más te guste 😉.")]),s._v(" "),e("p",[s._v("Bueno, esto es todo por hoy. Nos vemos en la próxima.")]),s._v(" "),e("p",[s._v("Happy coding! 🥸")]),s._v(" "),e("Disqus")],1)}),[],!1,null,null,null);a.default=n.exports}}]);